import os
import re
import time
import random
import logging
import asyncio
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from configparser import ConfigParser

config = ConfigParser()
config.read('private/.env')

BOT_TOKEN = config.get('BOT', 'TOKEN')

#BOT_TOKEN = '6176635957:AAHYqioHrLiiPsgDVKrUAzQeYe4A9It8eV4'
# message = '‚õè –ö–æ–ø–∞—Ç—å'
# username = 'mine_evo_bot'
last_button_press = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
states = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserInput(StatesGroup):
    message = State()
    username = State()
    message_count = State()
    message_auto = State()
    delay_count = State()
    residual_message = State()
    first_value = State()
    second_value = State()
    back = State()

async def send_notification():
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    send_notification = "*–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã!* üí´"
    keyboard = types.InlineKeyboardMarkup()
    done_button = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ', callback_data='done')
    keyboard.row(done_button)
    await bot.send_message(callback_query.from_user.id, send_notification, parse_mode="Markdown", reply_markup=keyboard)

async def read_delay():
    with open('head/values/delay.txt', 'r', encoding='cp1251') as file:
        delay_expression = file.read().strip()

        if delay_expression.startswith('random.uniform'):
            matches = re.findall(r'random.uniform\((.*?), (.*?)\)', delay_expression)
            if matches:
                lower_bound, upper_bound = matches[0]
                delay = f"{float(lower_bound)}, {float(upper_bound)}"
        elif delay_expression.isdigit():
            delay = float(delay_expression)
        else:
           delay = float(delay_expression)

    return delay

async def read_randomise():
    with open('head/values/randomise.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    first_value = lines[0].split("==")[1].strip()
    second_value = lines[1].split("==")[1].strip()
    return first_value, second_value

async def write_randomise(first_value, second_value):
    lines = []
    with open('head/values/randomise.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    lines[0] = f"first_value=={first_value}\n"
    lines[1] = f"second_value=={second_value}\n"
    with open('head/values/randomise.txt', 'w', encoding='utf-8') as file:
        file.writelines(lines)

async def update_delay():
    first_value, second_value = await read_randomise()

    if first_value is None or second_value is None:
        return

    lower_bound = float(first_value)
    upper_bound = float(second_value)

    if lower_bound < upper_bound:
        delay_expression = f"random.uniform({lower_bound}, {upper_bound})"
    else:
        delay_expression = f"random.uniform({upper_bound}, {lower_bound})"

    with open('head/values/delay.txt', 'w', encoding='utf-8') as file:
        file.write(delay_expression)

async def read_residual_message():
    with open('head/values/residual_message.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    residual_message = lines[0]
    return residual_message

async def write_message_content():
    _, _, message_auto = await read_autosend()
    message_content = message_auto
    with open('head/values/message.txt', 'w', encoding='utf-8-sig') as file:
        file.write(f"{message_content}")

async def write_residual():
    with open('head/values/residual_message.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    residual_message = lines[0]
    with open('head/values/message.txt', 'w', encoding='utf-8-sig') as file:
        file.write(f"{residual_message}")

async def read_autosend():
    with open('head/values/autosend_data.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    message_auto = lines[0].split("==")[1].strip()
    message_count = lines[1].split("==")[1].strip()
    with open('head/values/autosend.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    autosend = lines[0].split("==")[1].strip()
    return autosend, message_count, message_auto

async def write_autosend_content(message_auto):
    with open('head/values/autosend_data.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    lines[0] = f"message_auto=={message_auto}\n"
    with open('head/values/autosend_data.txt', 'w', encoding='cp1251') as file:
        file.writelines(lines)

async def write_autosend_count(message_count):
    with open('head/values/autosend_data.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    lines[1] = f"message_count=={message_count}\n"
    with open('head/values/autosend_data.txt', 'w', encoding='cp1251') as file:
        file.writelines(lines)

async def write_autosend(autosend):
    with open('head/values/autosend.txt', 'w', encoding='utf-8') as file:
        file.write(f"autosend=={autosend}\n")

async def read_remaining_messages():
    with open('head/values/remaining_messages.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    specified_messages = int(lines[0].split("==")[1].strip())
    return specified_messages

async def write_remaining_messages(specified_number_messages):
    with open('head/values/remaining_messages.txt', 'w', encoding='utf-8') as file:
        file.write(f"remaining_messages=={specified_number_messages}\n")

async def read_new_value():
    with open('head/values/new_message_value.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    last_of_messages = lines[0].split("==")[1].strip()
    return last_of_messages

async def stop_autosend():
    with open('head/values/remaining_messages.txt', 'w', encoding='utf-8') as file:
        file.write(f"remaining_messages==0\n")
    with open('head/values/new_message_value.txt', 'w', encoding='utf-8') as file:
        file.write(f"new_value==0\n")


async def read_settings():
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ settings.txt
    with open('head/values/settings.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    formatted_time = lines[0].split("==")[1].strip()
    stop_count = lines[1].split("==")[1].strip()
    sent_messages = lines[2].split("==")[1].strip()
    return formatted_time, stop_count, sent_messages

async def read_flood():
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ settings.txt
    with open('head/values/flood_wait.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    flood_wait = int(lines[0].split("==")[1].strip())
    return flood_wait

async def read_logs():
    with open('head/values/logs.txt', 'r', encoding='utf-8') as file:
        logs = file.readlines()
    return logs

async def show_logs(callback_query, state):
    logs = await read_logs()
    data = await state.get_data()
    index = data.get('logs_index', 0)
    limit = 10
    message_text = "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–≥–∏:*\n```"
    for line in logs[index:index + limit]:
        timestamp_end_index = line.index("]")
        timestamp = line[1:timestamp_end_index]
        log_text = line[timestamp_end_index + 2:]
        message_text += f"[{timestamp}] {log_text}"
    message_text += "```"
    keyboard = types.InlineKeyboardMarkup()
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='prev_logs')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data='next_logs')
    done_button = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ', callback_data='done')
    keyboard.row(prev_button, next_button)
    keyboard.row(done_button)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (callback_query.message.text == message_text and
            callback_query.message.reply_markup == keyboard):
        return
    # –†–µ–¥–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –ª–æ–≥–∞–º–∏
    await callback_query.bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=message_text, parse_mode="Markdown", reply_markup=keyboard)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.InlineKeyboardMarkup()
    change_category = types.InlineKeyboardButton(text='üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ', callback_data='change_category')
    loop_category = types.InlineKeyboardButton(text='üîÑ –¶–∏–∫–ª', callback_data='loop_category')
    statistics_category = types.InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='statistics_category')
    automation_category = types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', callback_data='automation_category')
    keyboard.add(change_category, statistics_category)
    keyboard.add(loop_category, automation_category)

    await message.reply("*ü™Ñ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*", parse_mode="Markdown", reply_markup=keyboard)

@dp.message_handler(commands=['settings'])
async def start_command(message: types.Message):
    delay = await read_delay()
    residual_message = await read_residual_message()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
    keyboard = types.InlineKeyboardMarkup()
    delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
    residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
    lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(delay_messages, residual_message, lever_stop)
    keyboard.add(done)
    await message.reply(text=settings_text, parse_mode="Markdown", reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def start_command(message: types.Message):
    # –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    with open('head/command/help_text.txt', 'r', encoding='utf-8') as file:
        help_text = file.read()

    keyboard = types.InlineKeyboardMarkup()
    settings = types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', callback_data='settings')
    remote_menu = types.InlineKeyboardButton(text='–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ü™Ñ', callback_data='menu')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(settings, remote_menu)
    keyboard.add(done)
    await message.reply(text=help_text, parse_mode="Markdown", reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: True)
async def button_click(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    button_text = callback_query.data

    keyboard = None  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π keyboard

    if button_text == 'menu':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = types.InlineKeyboardMarkup()
        change_category = types.InlineKeyboardButton(text='üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ', callback_data='change_category')
        loop_category = types.InlineKeyboardButton(text='üîÑ –¶–∏–∫–ª', callback_data='loop_category')
        statistics_category = types.InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='statistics_category')
        automation_category = types.InlineKeyboardButton(text='ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', callback_data='automation_category')
        keyboard.add(change_category, statistics_category)
        keyboard.add(loop_category, automation_category)
        await bot.send_message(callback_query.from_user.id, "*ü™Ñ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*", parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'settings':
        delay = await read_delay()
        residual_message = await read_residual_message()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
        keyboard = types.InlineKeyboardMarkup()
        delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
        residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
        lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard.add(delay_messages, residual_message, lever_stop)
        keyboard.add(done)
        await bot.send_message(callback_query.from_user.id, text=settings_text, parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'change_category':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üì©', callback_data='change_message'))
        keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', callback_data='change_username'))
        keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
        await bot.send_message(callback_query.from_user.id, "üåê –ö–∞—Ç–µ–≥–æ—Ä–∏—è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:*", parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'loop_category':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¶–∏–∫–ª"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚è∏Ô∏è', callback_data='stop'))
        keyboard.add(types.InlineKeyboardButton(text='–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å ‚ñ∂Ô∏è', callback_data='resume'))
        keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
        await bot.send_message(callback_query.from_user.id, "üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *–¶–∏–∫–ª:*", parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'statistics_category':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        formatted_time, stop_count, sent_messages = await read_settings()
        flood_wait = await read_flood()
        statistics = f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: *{formatted_time}*\nüì® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: *{sent_messages}*\nüõë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: *{stop_count}*"
        if flood_wait > 0:
            statistics += f"\n\nüïí –û—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ FloodWait: *{flood_wait}*"
        keyboard = types.InlineKeyboardMarkup()
        refresh_button = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è', callback_data='refresh_statistics')
        logs_button = types.InlineKeyboardButton(text='–õ–æ–≥–∏ üî£', callback_data='logs')
        keyboard.add(refresh_button, logs_button)
        await bot.send_message(callback_query.from_user.id, statistics, parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'automation_category':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¶–∏–∫–ª"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ üí†', callback_data='autosend'))
        keyboard.add(types.InlineKeyboardButton(text='–ê–≤—Ç–æ-—Ñ–∞—Ä–º ü•©', callback_data='autofarm'))
        keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
        await bot.send_message(callback_query.from_user.id, "ü§ñ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:*", parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'change_message':
        await bot.answer_callback_query(callback_query.id, text="üì© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await UserInput.message.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.message
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif button_text == 'change_username':
        await bot.answer_callback_query(callback_query.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤ —á–∞—Ç:")
        await UserInput.username.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.username
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif button_text == 'stop':
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        with open('head/values/pause.txt', 'r', encoding='cp1251') as file:
            lines = file.readlines()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è "Pause" –Ω–∞ True
        for i, line in enumerate(lines):
            if line.startswith('Pause'):
                lines[i] = 'Pause==True\n'
        # –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open('head/values/pause.txt', 'w', encoding='cp1251') as file:
            file.writelines(lines)
        await bot.answer_callback_query(callback_query.id, text="‚è∏Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    elif button_text == 'resume':
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        with open('head/values/pause.txt', 'r', encoding='cp1251') as file:
            lines = file.readlines()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è "Pause" –Ω–∞ False
        for i, line in enumerate(lines):
            if line.startswith('Pause'):
                lines[i] = 'Pause==False\n'
        # –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open('head/values/pause.txt', 'w', encoding='cp1251') as file:
            file.writelines(lines)
        await bot.answer_callback_query(callback_query.id, text="‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "refresh_statistics"
    elif button_text == 'refresh_statistics':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_press_time = last_button_press.get(callback_query.from_user.id, 0)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–∞ –ª–∏ —Å–µ–∫—É–Ω–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        if time.time() - last_press_time < 1.5:
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ
            await bot.answer_callback_query(callback_query.id, text="‚ùå –£–ø—Å... –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å!")
            return
        formatted_time, stop_count, sent_messages = await read_settings()
        flood_wait = await read_flood()
        statistics = f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: *{formatted_time}*\nüì® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: *{sent_messages}*\nüõë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: *{stop_count}*"
        if flood_wait > 0:
            statistics += f"\n\nüïí –û—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ FloodWait: *{flood_wait}*"
        keyboard = types.InlineKeyboardMarkup()
        refresh_button = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è', callback_data='refresh_statistics')
        logs_button = types.InlineKeyboardButton(text='–õ–æ–≥–∏ üî£', callback_data='logs')
        keyboard.add(refresh_button, logs_button)
        if statistics != callback_query.message.text or keyboard != callback_query.message.reply_markup:
            await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id, text=statistics,
                                        parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        last_button_press[callback_query.from_user.id] = time.time()

    elif button_text == 'logs':
        await show_logs(callback_query, state)

    elif button_text == 'prev_logs':
        data = await state.get_data()
        index = data.get('logs_index', 0)
        limit = 10
        has_prev_logs = index > 0
        if not has_prev_logs:
            await bot.answer_callback_query(callback_query.id, text="üìë –í—ã —É–∂–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ!")
            return
        logs = await read_logs()
        if index >= limit:
            index -= limit
        await state.update_data(logs_index=index)
        await callback_query.answer()
        await bot.answer_callback_query(callback_query.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤... ‚è±Ô∏è")
        await show_logs(callback_query, state)

    elif button_text == 'next_logs':
        data = await state.get_data()
        logs = await read_logs()
        index = data.get('logs_index', 0)
        limit = 10
        has_next_logs = (index + limit) < len(logs)
        if not has_next_logs:
            await bot.answer_callback_query(callback_query.id, text="üìë –°–ª–µ–¥—É—é—â–∏—Ö –ª–æ–≥–æ–≤ –µ—â—ë –Ω–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return  # Return here to avoid editing the message
        if index + limit < len(logs):
            index += limit
        await state.update_data(logs_index=index)
        await callback_query.answer()
        await bot.answer_callback_query(callback_query.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤... ‚è±Ô∏è")
        new_message_text = "\n".join(logs[index:index + limit])  # Replace with your logic to generate the message text
        if new_message_text != callback_query.message.text:
            await show_logs(callback_query, state)
        else:
            return

    elif button_text == 'autosend':
        autosend, message_count, message_auto = await read_autosend()
        last_of_messages = await read_new_value()
        if autosend == 'True':
            autosend_message = f"‚ùáÔ∏è –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüß≠ –ó–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n‚õΩÔ∏è –ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message_auto}\nü™Ç –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {last_of_messages}"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è', callback_data='refresh_autosend'))
            keyboard.add(types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å ‚ùåÔ∏è', callback_data='decline'))
        else:
            autosend_message = "üí¢ –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É üöÄ', callback_data='enable_autosend'))
            keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=autosend_message,
                                    parse_mode="None", reply_markup=keyboard, disable_web_page_preview=True)


    elif button_text == 'refresh_autosend':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        last_press_time = last_button_press.get(callback_query.from_user.id, 0)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–∞ –ª–∏ —Å–µ–∫—É–Ω–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        if time.time() - last_press_time < 1.5:
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–µ—Ä–∂–∫–µ
            await bot.answer_callback_query(callback_query.id, text="‚ùå –£–ø—Å... –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å!")
            return

        autosend, message_count, message_auto = await read_autosend()
        last_of_messages = await read_new_value()

        if autosend == "True":
            autosend_message = f"‚ùáÔ∏è –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüß≠ –ó–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n‚õΩÔ∏è –ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message_auto}\nü™Ç –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {last_of_messages}"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è', callback_data='refresh_autosend'))
            keyboard.add(types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å ‚ùåÔ∏è', callback_data='decline'))
        elif autosend == "False":
            autosend_message = "üí¢ –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É üöÄ', callback_data='enable_autosend'))
            keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        last_button_press[callback_query.from_user.id] = time.time()
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=autosend_message,
                                    parse_mode="None", reply_markup=keyboard, disable_web_page_preview=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É"
    elif button_text == 'enable_autosend':
        enable_autosend = "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üßÆ', callback_data='select_count'))
        keyboard.add(types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ üìî', callback_data='select_content'))
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='refresh_autosend'))
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=enable_autosend,
                                    parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
    elif button_text == 'select_content':
        content_message = "üìî –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='decline'))
        await UserInput.message_auto.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.message_auto
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        message = await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                              message_id=callback_query.message.message_id, text=content_message,
                                              parse_mode="Markdown", reply_markup=keyboard,
                                              disable_web_page_preview=True)
        await state.update_data(
            original_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    elif button_text == 'select_count':
        content_message = "üßÆ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='decline'))
        await UserInput.message_count.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.message_count
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        message = await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                              message_id=callback_query.message.message_id, text=content_message,
                                              parse_mode="Markdown", reply_markup=keyboard,
                                              disable_web_page_preview=True)
        await state.update_data(
            original_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    elif callback_query.data == 'confirm':
        autosend = True

        _, _, sent_messages = await read_settings()
        _, message_count, message_auto = await read_autosend()

        specified_number_messages = int(sent_messages) + int(message_count)

        await write_message_content()
        await write_remaining_messages(specified_number_messages)
        await write_autosend_content(message_auto)
        await write_autosend(autosend)

        autosend_message = f"‚ùáÔ∏è –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüß≠ –ó–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n‚õΩÔ∏è –ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message_auto}\nü™Ç –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: ~"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è', callback_data='autosend'))
        keyboard.add(types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å ‚ùåÔ∏è', callback_data='decline'))

        await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,
                                    text=autosend_message, parse_mode="None", reply_markup=keyboard)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    elif callback_query.data == 'decline':
        autosend = False
        message_auto = None
        message_count = 0
        await write_residual()
        await write_autosend(autosend)
        await write_autosend_content(message_auto)
        await write_autosend_count(message_count)
        await stop_autosend()
        autosend_message = "üí¢ –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É üöÄ', callback_data='enable_autosend'))
        keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=autosend_message,
                                    parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É"
    elif button_text == 'delay_messages':
        delay_msg = "*üö® –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏:*"
        keyboard = types.InlineKeyboardMarkup()
        onesec = types.InlineKeyboardButton(text='1 —Å–µ–∫—É–Ω–¥–∞ üïê', callback_data='1s')
        twosec = types.InlineKeyboardButton(text='2 —Å–µ–∫—É–Ω–¥—ã üïë', callback_data='2s')
        threesec = types.InlineKeyboardButton(text='3 —Å–µ–∫—É–Ω–¥—ã üïí', callback_data='3s')
        randomdelay = types.InlineKeyboardButton(text='–†–∞–Ω–¥–æ–º. üéí', callback_data='random_delay')
        inputdelay = types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ üßë‚Äç‚öñÔ∏è ', callback_data='input_delay')
        back = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚õî', callback_data='back')
        keyboard.row(onesec, twosec, threesec)
        keyboard.row(inputdelay, randomdelay)
        keyboard.row(back)


        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=delay_msg,
                                    parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

    elif button_text == '1s':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
        delay = "1"
        with open('head/values/delay.txt', 'w', encoding='utf-8') as file:
            file.writelines(f"{delay}")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ', callback_data='done'))
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"Ô∏èüïê –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {delay}!", reply_markup=keyboard, disable_web_page_preview=True)

    elif button_text == '2s':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
        delay = "2"
        with open('head/values/delay.txt', 'w', encoding='utf-8') as file:
            file.writelines(f"{delay}")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ', callback_data='done'))
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"Ô∏èüïê –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {delay}!", reply_markup=keyboard, disable_web_page_preview=True)

    elif button_text == '3s':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (3 —Å–µ–∫—É–Ω–¥—ã)
        delay = "3"
        with open('head/values/delay.txt', 'w', encoding='utf-8') as file:
            file.write(f"{delay}")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ', callback_data='done'))
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"Ô∏èüïê –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {delay}!", reply_markup=keyboard, disable_web_page_preview=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏"
    elif button_text == 'input_delay':
        enable_autosend = "üì¢ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ."
        keyboard = types.InlineKeyboardMarkup()
        input_delay = types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ üõéÔ∏è', callback_data='select_count_delay')
        no = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='delay_messages')
        keyboard.row(input_delay)
        keyboard.row(no)
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=enable_autosend,
                                    parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    elif button_text == 'select_count_delay':
        content_message = "üõéÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞–¥–µ—Ä–∂–∫–∏:"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='delay_messages'))
        await UserInput.delay_count.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.delay_count
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        message = await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                              message_id=callback_query.message.message_id, text=content_message,
                                              parse_mode="Markdown", reply_markup=keyboard,
                                              disable_web_page_preview=True)
        await state.update_data(
            original_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif button_text == 'residual_message':
        content_message = "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='settings'))
        await UserInput.residual_message.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.delay_count
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        message = await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                                  message_id=callback_query.message.message_id, text=content_message,
                                                  parse_mode="Markdown", reply_markup=keyboard,
                                                  disable_web_page_preview=True)
        await state.update_data(
            original_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif button_text == 'random_delay':
        random_delay = "üé≤ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏."
        keyboard = types.InlineKeyboardMarkup()
        input_first_value = types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ 1 –∑–Ω–∞—á–µ–Ω–∏–µ üàÇÔ∏è', callback_data='input_first')
        input_second_value = types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ 2 –∑–Ω–∞—á–µ–Ω–∏–µ üà≥', callback_data='input_second')
        no = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='randomise_decline')
        keyboard.row(input_first_value, input_second_value)
        keyboard.row(no)
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=random_delay,
                                    parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
    elif button_text == 'input_first':
        content_message = "üàÇÔ∏è –í–≤–µ–¥–∏—Ç–µ 1 –∑–Ω–∞—á–µ–Ω–∏–µ:"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='randomise_decline'))
        await UserInput.first_value.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.first_value.set
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        message = await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                              message_id=callback_query.message.message_id, text=content_message,
                                              parse_mode="Markdown", reply_markup=keyboard,
                                              disable_web_page_preview=True)
        await state.update_data(
            original_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    elif button_text == 'input_second':
        content_message = "üà≥ –í–≤–µ–¥–∏—Ç–µ 2 –∑–Ω–∞—á–µ–Ω–∏–µ:"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='randomise_decline'))
        await UserInput.second_value.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.message_count
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        message = await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                              message_id=callback_query.message.message_id, text=content_message,
                                              parse_mode="Markdown", reply_markup=keyboard,
                                              disable_web_page_preview=True)
        await state.update_data(
            original_message_id=message.message_id)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


    elif button_text == 'randomise_decline':
        first_value = None
        second_value = None

        await write_randomise(first_value, second_value)

        delay = await read_delay()
        residual_message = await read_residual_message()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∞
        settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
        keyboard = types.InlineKeyboardMarkup()
        delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
        residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
        lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard.add(delay_messages, residual_message, lever_stop)
        keyboard.add(done)
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=settings_text,
                                    parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

    elif button_text == 'randomise_confirm':

        await update_delay()
        delay = await read_delay()
        residual_message = await read_residual_message()

        first_value = None
        second_value = None
        await write_randomise(first_value, second_value)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        residual_message_text = f"*üöß –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞:* {delay}"
        keyboard_complete = types.InlineKeyboardMarkup()
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard_complete.add(done)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
        keyboard = types.InlineKeyboardMarkup()
        delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
        residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
        lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard.add(delay_messages, residual_message, lever_stop)
        keyboard.add(done)

        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id, text=settings_text,
                                    parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)
        complete_message = await bot.send_message(chat_id=callback_query.from_user.id,
                                                  text=residual_message_text,
                                                  reply_markup=keyboard_complete,
                                                  parse_mode="Markdown", disable_web_page_preview=True)
        await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
        try:
            await bot.delete_message(chat_id=complete_message.chat.id, message_id=complete_message.message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass


    elif button_text == 'done':
        await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úî Ô∏è")
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    elif button_text == 'back':
        await bot.answer_callback_query(callback_query.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏! üéä")
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

        await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

@dp.message_handler(state=UserInput.first_value)
async def update_message(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è
    delay = message.text.strip().replace(',', '.')  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    if delay.replace('.', '', 1).isdigit() and float(delay) > 0:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open('head/values/randomise.txt', 'r', encoding='utf-8') as file:
            lines = file.readlines()
        lines[0] = f"first_value=={delay}\n"
        with open('head/values/randomise.txt', 'w', encoding='utf-8') as file:
            file.writelines(lines)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        first_value, second_value = await read_randomise()
        data = await state.get_data()
        original_message_id = data.get('original_message_id')

        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await state.finish()

        if second_value != "None":
            randomise_text = f"üàÇÔ∏è –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {message.text}\nüà≥ –í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {second_value}"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚ùáÔ∏è', callback_data='randomise_confirm'))
            keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚õî', callback_data='randomise_decline'))
        else:
            randomise_text = f"üàÇÔ∏è –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {message.text}\nüà≥ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ 2 –∑–Ω–∞—á–µ–Ω–∏–µ üà≥', callback_data='input_second'))
            keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='randomise_decline'))
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é bot.edit_message_text
        await bot.edit_message_text(chat_id=message.chat.id, message_id=original_message_id, text=randomise_text, parse_mode="None", reply_markup=keyboard)
    else:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.answer_callback_query(callback_query_id=message.message_id, text="–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è! ‚ò†Ô∏è")
        return

@dp.message_handler(state=UserInput.second_value)
async def update_message(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è
    delay = message.text.strip().replace(',', '.')  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    if delay.replace('.', '', 1).isdigit() and float(delay) > 0:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open('head/values/randomise.txt', 'r', encoding='utf-8') as file:
            lines = file.readlines()
        lines[1] = f"second_value=={delay}\n"
        with open('head/values/randomise.txt', 'w', encoding='utf-8') as file:
            file.writelines(lines)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        first_value, second_value = await read_randomise()
        data = await state.get_data()
        original_message_id = data.get('original_message_id')

        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await state.finish()

        if first_value != "None":
            randomise_text = f"üàÇÔ∏è –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {first_value}\nüà≥ –í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {message.text}"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚ùáÔ∏è', callback_data='randomise_confirm'))
            keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚õî', callback_data='randomise_decline'))
        else:
            randomise_text = f"üàÇÔ∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\nüà≥ –í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {message.text}"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ 1 –∑–Ω–∞—á–µ–Ω–∏–µ üà≥', callback_data='input_first'))
            keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='randomise_decline'))
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é bot.edit_message_text
        await bot.edit_message_text(chat_id=message.chat.id, message_id=original_message_id, text=randomise_text, parse_mode="None", reply_markup=keyboard)
    else:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.answer_callback_query(callback_query_id=message.message_id, text="–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è! ‚ò†Ô∏è")
        return

@dp.callback_query_handler(lambda query: query.data == 'randomise_decline', state=UserInput.first_value)
async def cancel_first_value(query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    delay = await read_delay()
    residual_message = await read_residual_message()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∞
    settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
    keyboard = types.InlineKeyboardMarkup()
    delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
    residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
    lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(delay_messages, residual_message, lever_stop)
    keyboard.add(done)
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, text=settings_text, parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

@dp.callback_query_handler(lambda query: query.data == 'randomise_decline', state=UserInput.second_value)
async def cancel_second_value(query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    delay = await read_delay()
    residual_message = await read_residual_message()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∞
    settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
    keyboard = types.InlineKeyboardMarkup()
    delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
    residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
    lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(delay_messages, residual_message, lever_stop)
    keyboard.add(done)
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, text=settings_text, parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

@dp.message_handler(state=UserInput.residual_message)
async def update_message(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    original_message_id = data.get('original_message_id')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    with open('head/values/residual_message.txt', 'w', encoding='utf-8') as file:
        file.write(message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    delay = await read_delay()
    residual_message = await read_residual_message()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    residual_message_text = f"*üåÜ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:* {message.text}"
    keyboard_complete = types.InlineKeyboardMarkup()
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard_complete.add(done)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∞
    settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
    keyboard = types.InlineKeyboardMarkup()
    delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
    residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
    lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(delay_messages, residual_message, lever_stop)
    keyboard.add(done)

    await bot.edit_message_text(chat_id=message.chat.id, message_id=original_message_id,
                                text=settings_text,
                                reply_markup=keyboard, parse_mode="Markdown",
                                disable_web_page_preview=True)
    complete_message = await bot.send_message(chat_id=message.chat.id,
                                              text=residual_message_text,
                                              reply_markup=keyboard_complete,
                                              parse_mode="Markdown", disable_web_page_preview=True)

    await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
    try:
        await bot.delete_message(chat_id=complete_message.chat.id, message_id=complete_message.message_id)
    except aiogram.utils.exceptions.MessageToDeleteNotFound:
        pass

@dp.callback_query_handler(lambda query: query.data == 'settings', state=UserInput.residual_message)
async def cancel_delay_input(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    delay = await read_delay()
    residual_message = await read_residual_message()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
    keyboard = types.InlineKeyboardMarkup()
    delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
    residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
    lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(delay_messages, residual_message, lever_stop)
    keyboard.add(done)

    await bot.edit_message_text(chat_id=query.message.chat.id,
                                message_id=query.message.message_id, text=settings_text,
                                parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

@dp.message_handler(state=UserInput.delay_count)
async def input_delay(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    original_message_id = data.get('original_message_id')

    delay = message.text.strip().replace(',', '.')  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    if delay.replace('.', '', 1).isdigit() and float(delay) > 0:
        with open('head/values/delay.txt', 'w', encoding='utf-8') as file:
            file.write(delay)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await state.finish()
        keyboard_complete = types.InlineKeyboardMarkup()
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard_complete.add(done)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é original_message_id
        delay = await read_delay()
        residual_message_data = await read_residual_message()
        settings_text = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è*\n\n*üöß –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:* {delay} \n*üèôÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:* {residual_message_data}\n*üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏:* '
        keyboard = types.InlineKeyboardMarkup()
        delay_messages = types.InlineKeyboardButton(text='–ó–∞–¥–µ—Ä–∂–∫–∞ üöß', callback_data='delay_messages')
        residual_message = types.InlineKeyboardButton(text='–ü–æ—Å–ª–µ–¥. üèôÔ∏è', callback_data='residual_message')
        lever_stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∏ üõë', callback_data='lever_stop')
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard.add(delay_messages, residual_message, lever_stop)
        keyboard.add(done)

        await bot.edit_message_text(chat_id=message.chat.id, message_id=original_message_id,
                                        text=settings_text,
                                        reply_markup=keyboard, parse_mode="Markdown",
                                        disable_web_page_preview=True)

        complete_message = await bot.send_message(chat_id=message.chat.id,
                                                  text=f"üöß –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {delay}",
                                                  reply_markup=keyboard_complete,
                                                  parse_mode="Markdown", disable_web_page_preview=True)
        await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
        try:
            await bot.delete_message(chat_id=complete_message.chat.id, message_id=complete_message.message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass

    else:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        error_message = await bot.send_message(chat_id=message.chat.id,
                                               text=f"*‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏.*",
                                               parse_mode="Markdown", disable_web_page_preview=True)
        await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
        try:
            await bot.delete_message(chat_id=error_message.chat.id, message_id=error_message.message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass

@dp.callback_query_handler(lambda query: query.data == 'delay_messages', state=UserInput.delay_count)
async def cancel_delay_input(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    delay_msg = "*üö® –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏:*"
    keyboard = types.InlineKeyboardMarkup()
    onesec = types.InlineKeyboardButton(text='1 —Å–µ–∫—É–Ω–¥–∞ üïê', callback_data='1s')
    twosec = types.InlineKeyboardButton(text='2 —Å–µ–∫—É–Ω–¥—ã üïë', callback_data='2s')
    threesec = types.InlineKeyboardButton(text='3 —Å–µ–∫—É–Ω–¥—ã üïí', callback_data='3s')
    randomdelay = types.InlineKeyboardButton(text='–†–∞–Ω–¥–æ–º. üéí', callback_data='random_delay')
    inputdelay = types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ üßë‚Äç‚öñÔ∏è ', callback_data='input_delay')
    back = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚õî', callback_data='back')
    keyboard.row(onesec, twosec, threesec)
    keyboard.row(inputdelay, randomdelay)
    keyboard.row(back)

    await bot.edit_message_text(chat_id=query.message.chat.id,
                                message_id=query.message.message_id, text=delay_msg,
                                parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

@dp.message_handler(state=UserInput.message)
async def update_message(message: types.Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    with open('head/values/message.txt', 'w', encoding='utf-8-sig') as file:
        file.write(message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ', callback_data='done'))
    await bot.send_message(chat_id=message.chat.id, text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}", reply_markup=keyboard, disable_web_page_preview=True)

@dp.message_handler(state=UserInput.username)
async def update_username(message: types.Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open('head/values/username.txt', 'w', encoding='utf-8-sig') as file:
        file.write(message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ', callback_data='done'))
    await bot.send_message(chat_id=message.chat.id, text=f"üëÅÔ∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}", reply_markup=keyboard, disable_web_page_preview=True)


@dp.callback_query_handler(lambda query: query.data == 'decline', state=UserInput.message_auto)
async def cancel_message_input(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    autosend = False
    message_auto = None
    message_count = 0
    await write_autosend(autosend)
    await write_autosend_content(message_auto)
    await write_autosend_count(message_count)
    autosend_message = "üí¢ –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É üöÄ', callback_data='enable_autosend'))
    keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, text=autosend_message, parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

@dp.callback_query_handler(lambda query: query.data == 'decline', state=UserInput.message_count)
async def cancel_message_input(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    autosend = False
    message_auto = None
    message_count = 0
    await write_autosend(autosend)
    await write_autosend_content(message_auto)
    await write_autosend_count(message_count)
    autosend_message = "üí¢ –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É üöÄ', callback_data='enable_autosend'))
    keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id, text=autosend_message, parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)


@dp.message_handler(state=UserInput.message_auto)
async def update_message(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    original_message_id = data.get('original_message_id')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open('head/values/autosend_data.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    lines[0] = f"message_auto=={message.text}\n"
    with open('head/values/autosend_data.txt', 'w', encoding='cp1251') as file:
        file.writelines(lines)

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish()
    autosend, message_count, message_auto = await read_autosend()
    if message_count != "0":
        content_autosend = f"üß≠ –ó–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n‚õΩÔ∏è –ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message.text}"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚ùáÔ∏è', callback_data='confirm'))
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚õî', callback_data='decline'))
    else:
        content_autosend = f"üß≠ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π!\n‚õΩÔ∏è –ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message.text}"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üßÆ', callback_data='select_count'))
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='decline'))
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é bot.edit_message_text
    await bot.edit_message_text(chat_id=message.chat.id, message_id=original_message_id, text=content_autosend, parse_mode="None", reply_markup=keyboard)

@dp.message_handler(state=UserInput.message_count)
async def update_message(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if not message.text.isdigit():
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.answer_callback_query(callback_query_id=message.message_id, text="–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ! ‚ò†Ô∏è")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    original_message_id = data.get('original_message_id')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open('head/values/autosend_data.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    lines[1] = f"message_count=={message.text}\n"
    with open('head/values/autosend_data.txt', 'w', encoding='cp1251') as file:
        file.writelines(lines)

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish()

    autosend, message_count, message_auto = await read_autosend()
    if message_auto != "None":
        count_autosend = f"üß≠ –ó–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message.text}\n‚õΩÔ∏è –ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message_auto}"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚ùáÔ∏è', callback_data='confirm'))
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚õî', callback_data='decline'))
    else:
        count_autosend = f"üß≠ –ó–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message.text}\n‚õΩÔ∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ üìî', callback_data='select_content'))
        keyboard.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='decline'))
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é bot.edit_message_text
    await bot.edit_message_text(chat_id=message.chat.id, message_id=original_message_id, text=count_autosend, parse_mode="None", reply_markup=keyboard)


async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())