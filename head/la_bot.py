import time
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup


BOT_TOKEN = '6176635957:AAHYqioHrLiiPsgDVKrUAzQeYe4A9It8eV4'
# message = '‚õè –ö–æ–ø–∞—Ç—å'
# username = 'mine_evo_bot'


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
states = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserInput(StatesGroup):
    message = State()
    username = State()
    back = State()

async def read_settings():
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ settings.txt
    with open('head/values/settings.txt', 'r', encoding='cp1251') as file:
        lines = file.readlines()
    formatted_time = lines[1].split("==")[1].strip()
    stop_count = lines[2].split("==")[1].strip()
    sent_messages = lines[3].split("==")[1].strip()
    return formatted_time, stop_count, sent_messages


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.InlineKeyboardMarkup()
    change_category = types.InlineKeyboardButton(text='üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ', callback_data='change_category')
    loop_category = types.InlineKeyboardButton(text='üîÑ –¶–∏–∫–ª', callback_data='loop_category')
    statistics_category = types.InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='statistics_category')
    keyboard.add(change_category, loop_category, statistics_category)
    await message.reply("*ü™Ñ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*", parse_mode="Markdown", reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: True)
async def button_click(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    button_text = callback_query.data

    keyboard = None  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π keyboard

    if button_text == 'change_category':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üì©', callback_data='change_message'))
        keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', callback_data='change_username'))
        keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
        await bot.send_message(callback_query.from_user.id, "üåê –ö–∞—Ç–µ–≥–æ—Ä–∏—è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:*", parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'loop_category':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¶–∏–∫–ª"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚è∏Ô∏è', callback_data='stop'))
        keyboard.add(types.InlineKeyboardButton(text='–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å ‚ñ∂Ô∏è', callback_data='resume'))
        keyboard.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back'))
        await bot.send_message(callback_query.from_user.id, "üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *–¶–∏–∫–ª:*", parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'statistics_category':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        formatted_time, stop_count, sent_messages = await read_settings()
        statistics = f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: *{formatted_time}*\nüì® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: *{sent_messages}*\nüõë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: *{stop_count}*"
        keyboard = types.InlineKeyboardMarkup()
        refresh_button = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è', callback_data='refresh_statistics')
        logs_button = types.InlineKeyboardButton(text='–õ–æ–≥–∏ üî£', callback_data='logs')
        keyboard.add(refresh_button, logs_button)
        await bot.send_message(callback_query.from_user.id, statistics, parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'change_message':
        await bot.answer_callback_query(callback_query.id, text="üì© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await UserInput.message.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.message
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif button_text == 'change_username':
        await bot.answer_callback_query(callback_query.id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤ —á–∞—Ç:")
        await UserInput.username.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UserInput.username
        await state.update_data(keyboard=keyboard)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keyboard –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif button_text == 'stop':
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        with open('head/values/settings.txt', 'r', encoding='cp1251') as file:
            lines = file.readlines()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è "Pause" –Ω–∞ True
        for i, line in enumerate(lines):
            if line.startswith('Pause'):
                lines[i] = 'Pause==True\n'
        # –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open('head/values/settings.txt', 'w', encoding='cp1251') as file:
            file.writelines(lines)
        await bot.answer_callback_query(callback_query.id, text="‚è∏Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    elif button_text == 'resume':
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        with open('head/values/settings.txt', 'r', encoding='cp1251') as file:
            lines = file.readlines()
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è "Pause" –Ω–∞ False
        for i, line in enumerate(lines):
            if line.startswith('Pause'):
                lines[i] = 'Pause==False\n'
        # –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open('head/values/settings.txt', 'w', encoding='cp1251') as file:
            file.writelines(lines)
        await bot.answer_callback_query(callback_query.id, text="‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    elif button_text == 'refresh_statistics':
        formatted_time, stop_count, sent_messages = await read_settings()
        statistics = f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: *{formatted_time}*\nüì® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: *{sent_messages}*\nüõë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: *{stop_count}*"
        keyboard = types.InlineKeyboardMarkup()
        refresh_button = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è', callback_data='refresh_statistics')
        logs_button = types.InlineKeyboardButton(text='–õ–æ–≥–∏ üî£', callback_data='logs')
        keyboard.add(refresh_button, logs_button)
        if statistics != callback_query.message.text or keyboard != callback_query.message.reply_markup:
            await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id, text=statistics,
                                        parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

    elif button_text == 'logs':
        # –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤
        await bot.answer_callback_query(callback_query.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...")

    elif button_text == 'back':
        await bot.answer_callback_query(callback_query.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é! üéä")
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

        await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@dp.message_handler(state=UserInput.message)
async def update_message (message: types.Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    with open('head/values/message.txt', 'w', encoding='utf-8-sig') as file:
        file.write(message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(chat_id=message.chat.id, text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}")


@dp.message_handler(state=UserInput.username)
async def update_username (message: types.Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open('head/values/username.txt', 'w', encoding='utf-8-sig') as file:
        file.write(message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(chat_id=message.chat.id, text=f"üëÅÔ∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}")


async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())