from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.types import ChatPermissions, Message
from pyrogram.raw import functions
import re
import time
import math
from datetime import date, datetime
from time import sleep
import random
import asyncio
from langdetect import detect
import wikipediaapi
import wikipedia
import fasttext
from collections import defaultdict
from translate import Translator
import pytz
import requests
from geopy.geocoders import Nominatim
from timezonefinderL import TimezoneFinder
import arrow
from translate import Translator

import locale


# API –∫–ª—é—á OpenWeatherMap
OpenWeather_KEY = "242106ba69b46e2a5bc4badfcae321ac"

api_id = 20096642
api_hash = "cc4d7960b1288548196c28045c79539d"

app = Client("my_account", api_id=api_id, api_hash=api_hash)

# Load the pre-trained language identificati–æn model
fasttext_model = fasttext.load_model("model/lid.176.bin")

# Function to detect language using Fasttext
def detect_language(text):
    predictions = fasttext_model.predict(text)
    return predictions[0][0].replace("__label__", "")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
@app.on_message(filters.command(["wiki"], prefixes=".") & filters.me)
async def wiki(_, msg):
    command = msg.text.split(".wiki ", maxsplit=1)[1]
    query = command
    language = None  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    query_parts = query.split(" ")
    for part in query_parts:
        if part.lower() in ["uk", "ru", "en"]:
            language = part.lower()
            query_parts.remove(part)
            query = " ".join(query_parts)
            break

    if language is None:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞
        detected_language = detect_language(query)
        if detected_language == "ru":
            language = "ru"
        elif detected_language == "uk":
            language = "uk"
        else:
            language = "en"

    try:
        wiki_wiki = wikipediaapi.Wikipedia(language)

        page_py = wiki_wiki.page(query)

        if page_py.exists():
            page_title = page_py.title
            page_url = page_py.fullurl
            summary = page_py.summary[0:550]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤

            if language == "ru":
                response = f"**üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ –¥–ª—è `{query}` –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:**\n\n" \
                           f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {page_title}\n\n" \
                           f"**–°—Å—ã–ª–∫–∞:** {page_url}\n\n" \
                           f"**<emoji id=5447410659077661506>üåê</emoji>  –°—Ç–∞—Ç—å—è:**\n{summary}"
            elif language == "uk":
                response = f"**üìö –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó –¥–ª—è `{query}` —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:**\n\n" \
                           f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {page_title}\n\n" \
                           f"**–ü–æ—Å–∏–ª–∞–Ω–Ω—è:** {page_url}\n\n" \
                           f"**<emoji id=5447410659077661506>üåê</emoji>  –°—Ç–∞—Ç—Ç—è:**\n{summary}"
            else:
                response = f"**üìö Wikipedia search results for `{query}` in English:**\n\n" \
                           f"**Title:** {page_title}\n\n" \
                           f"**Link:** {page_url}\n\n" \
                           f"**<emoji id=5447410659077661506>üåê</emoji>  Summary:**\n{summary}"
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            wikipedia.set_lang(language)
            search_results = wikipedia.search(query)

            if len(search_results) > 0:
                page = search_results[0]
                page_py = wiki_wiki.page(page)

                page_title = page_py.title
                page_url = page_py.fullurl
                summary = page_py.summary[0:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤

                if language == "ru":
                    response = f"**üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ –¥–ª—è `{query}` –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:**\n\n" \
                               f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {page_title}\n\n" \
                               f"**–°—Å—ã–ª–∫–∞:** {page_url}\n\n" \
                               f"**<emoji id=5447410659077661506>üåê</emoji>  –°—Ç–∞—Ç—å—è:**\n{summary}"
                elif language == "uk":
                    response = f"**üìö –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó –¥–ª—è `{query}` —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:**\n\n" \
                               f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {page_title}\n\n" \
                               f"**–ü–æ—Å–∏–ª–∞–Ω–Ω—è:** {page_url}\n\n" \
                               f"**<emoji id=5447410659077661506>üåê</emoji>  –°—Ç–∞—Ç—Ç—è:**\n{summary}"
                else:
                    response = f"**üìö Wikipedia search results for `{query}` in English:**\n\n" \
                               f"**Title:** {page_title}\n\n" \
                               f"**Link:** {page_url}\n\n" \
                               f"**<emoji id=5447410659077661506>üåê</emoji>  Summary:**\n{summary}"
            else:
                response = f"<emoji id=5210952531676504517>‚ùå</emoji> No results found in Wikipedia for `{query}` in {language.upper()}."

        await msg.edit(response)
    except Exception as e:
        await msg.edit(f"<emoji id=5210952531676504517>‚ùå</emoji> An error occurred while searching Wikipedia:\n{e}")

# Function for text translation
@app.on_message(filters.command(["tr", "t"], prefixes=".") & filters.me)
async def translate(_, msg):
    command = msg.command
    if len(command) > 2:
        text = " ".join(command[1:-1])
        target_language = command[-1].lower()
    else:
        await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> Invalid command format. Please use `.tr (text) (target_language)` or `.t (text) (target_language)`.\n\n See all target_language use: `.langcodes`")
        return

    try:
        # Detect the language of the text
        detected_language = detect_language(text)

        # Translate the text
        translator = Translator(to_lang=target_language, from_lang=detected_language)
        translation = translator.translate(text)

        if command[0] == "tr":
            await msg.edit(f"üåê **Translation:**\n\n**<emoji id=5433811242135331842>üì•</emoji> Input:** {text}\n**<emoji id=5406631276042002796>üì®</emoji> Output:** {translation}")
        else:
            await msg.edit(translation)
    except Exception as e:
        await msg.edit(f"<emoji id=5210952531676504517>‚ùå</emoji> An error occurred during translation:\n{e}")

# Function to display language codes/names
@app.on_message(filters.command("langcodes", prefixes=".") & filters.me)
async def show_language_codes(_, msg):
    language_codes = {
        "`af`": "Afrikaans",
        "`sq`": "Albanian",
        "`am`": "Amharic",
        "`ar`": "Arabic",
        "`hy`": "Armenian",
        "`az`": "Azerbaijani",
        "`eu`": "Basque",
        "`be`": "Belarusian",
        "`bn`": "Bengali",
        "`bs`": "Bosnian",
        "`bg`": "Bulgarian",
        "`ca`": "Catalan",
        "`ceb`": "Cebuano",
        "`ny`": "Chichewa",
        "`zh-cn`": "Chinese (Simplified)",
        "`zh-tw`": "Chinese (Traditional)",
        "`co`": "Corsican",
        "`hr`": "Croatian",
        "`cs`": "Czech",
        "`da`": "Danish",
        "`nl`": "Dutch",
        "`en`": "English",
        "`eo`": "Esperanto",
        "`et`": "Estonian",
        "`tl`": "Filipino",
        "`fi`": "Finnish",
        "`fr`": "French",
        "`fy`": "Frisian",
        "`gl`": "Galician",
        "`ka`": "Georgian",
        "`de`": "German",
        "`el`": "Greek",
        "`gu`": "Gujarati",
        "`ha`": "Hausa",
        "`haw`": "Hawaiian",
        "`iw`": "Hebrew",
        "`hi`": "Hindi",
        "`hmn`": "Hmong",
        "`hu`": "Hungarian",
        "`is`": "Icelandic",
        "`ig`": "Igbo",
        "`id`": "Indonesian",
        "`ga`": "Irish",
        "`it`": "Italian",
        "`ja`": "Japanese",
        "`jw`": "Javanese",
        "`kn`": "Kannada",
        "`kk`": "Kazakh",
        "`km`": "Khmer",
        "`ko`": "Korean",
        "`ku`": "Kurdish (Kurmanji)",
        "`ky`": "Kyrgyz",
        "`lo`": "Lao",
        "`la`": "Latin",
        "`lv`": "Latvian",
        "`lt`": "Lithuanian",
        "`lb`": "Luxembourgish",
        "`mk`": "Macedonian",
        "`mg`": "Malagasy",
        "`ms`": "Malay",
        "`ml`": "Malayalam",
        "`mt`": "Maltese",
        "`mi`": "Maori",
        "`mr`": "Marathi",
        "`mn`": "Mongolian",
        "`my`": "Myanmar (Burmese)",
        "`ne`": "Nepali",
        "`no`": "Norwegian",
        "`ps`": "Pashto",
        "`fa`": "Persian",
        "`pl`": "Polish",
        "`pt`": "Portuguese",
        "`pa`": "Punjabi",
        "`ro`": "Romanian",
        "`ru`": "Russian",
        "`sm`": "Samoan",
        "`gd`": "Scots Gaelic",
        "`sr`": "Serbian",
        "`st`": "Sesotho",
        "`sn`": "Shona",
        "`sd`": "Sindhi",
        "`si`": "Sinhala",
        "`sk`": "Slovak",
        "`sl`": "Slovenian",
        "`so`": "Somali",
        "`es`": "Spanish",
        "`su`": "Sundanese",
        "`sw`": "Swahili",
        "`sv`": "Swedish",
        "`tg`": "Tajik",
        "`ta`": "Tamil",
        "`te`": "Telugu",
        "`th`": "Thai",
        "`tr`": "Turkish",
        "`uk`": "Ukrainian",
        "`ur`": "Urdu",
        "`ug`": "Uyghur",
        "`uz`": "Uzbek",
        "`vi`": "Vietnamese",
    }

    language_list = "\n".join(f"{code} = {name}" for code, name in language_codes.items())
    await msg.edit(f"üåç **Language Codes**\n\n{language_list}")

# Command to calculate the required quantity of plasma
@app.on_message(filters.command("gqp", prefixes=".") & filters.me)
async def get_quantity_of_plasma(_, msg):
    command = msg.command
    if len(command) == 3:
        current_level = int(command[1])
        desired_level = int(command[2])

        if current_level < 1 or desired_level < 1:
            await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> Invalid input. The current and desired levels must be positive integers.")
            return

        if desired_level <= current_level:
            await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> Invalid input. The desired level must be greater than the current level.")
            return

        plasma_cost = sum(10000 + 5000 * (level - 1) for level in range(current_level, desired_level))

        formatted_plasma_cost = "{:,}".format(plasma_cost).replace(",", " ")
        await msg.edit(f"<emoji id=5424972470023104089>üî•</emoji> **Plasma Quantity Calculation**\n\n**<emoji id=5382322671679708881>1Ô∏è‚É£</emoji> Current Level:** {current_level}\n**<emoji id=5381990043642502553>2Ô∏è‚É£</emoji> Desired Level:** {desired_level}\n\n**<emoji id=5366531532926231383>üò®</emoji> Required Plasma Quantity:** {formatted_plasma_cost}")
    else:
        await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> Invalid command format. Please use `.gqp (current_level) (desired_level)`.")

# Function to calculate the remaining days until the specified month
def calculate_remaining_days(month, day=None):
    now = datetime.datetime.now()
    target_month = datetime.datetime.strptime(month, "%B").month
    target_year = now.year if target_month >= now.month else now.year + 1

    if day:
        target_date = datetime.datetime(target_year, target_month, day)
    else:
        last_day_of_month = datetime.date(target_year, target_month + 1, 1) - datetime.timedelta(days=1)
        target_date = datetime.datetime(target_year, target_month, last_day_of_month.day)

    remaining_days = (target_date - now).days

    return remaining_days

# Function to generate a progress bar based on the remaining days
def generate_progress_bar(remaining_days):
    total_days = 365
    completed_percentage = (total_days - remaining_days) / total_days
    completed_blocks = min(int(completed_percentage * 10), 10)
    empty_blocks = 10 - completed_blocks

    progress_bar = "üü©" * completed_blocks + "‚¨úÔ∏è" * empty_blocks

    return progress_bar

# Command to calculate the remaining days until a specified month
@app.on_message(filters.command("st", prefixes=".") & filters.me)
async def remaining_days(_, msg):
    command = msg.command
    if len(command) >= 2:
        month = command[1]
        day = None

        if len(command) >= 3:
            try:
                day = int(command[2])
            except ValueError:
                pass

        remaining_days = calculate_remaining_days(month, day)
        progress_bar = generate_progress_bar(remaining_days)

        if day:
            await msg.edit(f"üìÖ **Countdown to {month} {day}**\n\nRemaining Days: {remaining_days}\n\n{progress_bar}")
        else:
            await msg.edit(f"üìÖ **Countdown to {month}**\n\nRemaining Days: {remaining_days}\n\n{progress_bar}")
    else:
        await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> Invalid command format. Please use `.st (month) [day]`.")

@app.on_message(filters.command("desc", prefixes=".") & filters.me)
async def change_description(_, msg):
    new_description = msg.text.split(maxsplit=1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    chat_id = msg.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID (—á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞)

    try:
        chat = await app.get_chat(chat_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        if chat.permissions.can_change_info:
            await app.set_chat_description(chat_id, new_description)  # –ò–∑–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await msg.edit(f"**–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:**\n{new_description}")
        else:
            await msg.edit("**–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ**")
    except Exception as e:
        await msg.edit(f"**–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:** {str(e)}")

@app.on_message(filters.command(["ping", "p"], prefixes=".") & filters.me)
async def ping(_, msg):
    start_time = time.time()
    message = await msg.edit("<emoji id=6325806796246091512>üòÅ</emoji> –ñ–¥–µ–º-—Å...")
    end_time = time.time()
    latency = (end_time - start_time) * 1000
    await message.edit(f"**<emoji id=5215444784000277441>‚ö°Ô∏è</emoji> –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–∫–ª–∏–∫–æ–º:** {latency:.2f} ms")

@app.on_message(filters.command(["type", "t"], prefixes=".") & filters.me)
async def type(_, msg):
    command = msg.command
    if len(command) > 1:
        orig_text = msg.text.split(".type ", maxsplit=1)[1]
    else:
        orig_text = msg.text.split(".t ", maxsplit=1)[1]
    text = orig_text
    tbp = ""  # to be printed
    typing_symbol = "‚ñí"

    while tbp != orig_text:
        try:
            await msg.edit(tbp + typing_symbol)
            await asyncio.sleep(0.05)  # 50 ms

            tbp = tbp + text[0]
            text = text[1:]

            await msg.edit(tbp)
            await asyncio.sleep(0.05)

        except FloodWait as e:

            await asyncio.sleep(e.x)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ —Ñ–∞–π–ª
async def get_chat_user_ids(chat):
    members = []
    async for member in app.get_chat_members(chat.id):
        if member.user and not member.user.is_bot:
            members.append(str(member.user.id))
    return members

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —Å –∞–π–¥–∏ –≤ –≥—Ä—É–ø–ø—É
@app.on_message(filters.command(["getids"], prefixes=".") & filters.me)
async def get_ids(_, msg):
    chat = msg.chat
    user_ids = await get_chat_user_ids(chat)

    if user_ids:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
        with open("head/value/user_ids.txt", "w") as file:
            file.write(" ".join(user_ids))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç/–≥—Ä—É–ø–ø—É
        await app.send_document(chat.id, "head/value/user_ids.txt", caption="User IDs in the chat:")

        await msg.edit("User IDs collected and sent.")
    else:
        await msg.edit("No user IDs found in the chat.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–π–¥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_user_ids(text):
    pattern = r"\((\d+)\)"
    return re.findall(pattern, text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–π–¥–∏ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
@app.on_message(filters.command(["ids"], prefixes=".") & filters.me)
async def extract_and_send_ids(_, msg):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = msg.text

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–π–¥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    user_ids = extract_user_ids(text)

    if user_ids:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–π–¥–∏ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç)
        await msg.reply("\n".join(user_ids))

        await msg.edit("User IDs extracted and sent.")
    else:
        await msg.edit("No user IDs found in the message.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–π–¥–∏ –∏–∑ –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞–π–¥–∏ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
@app.on_message(filters.command(["sum"], prefixes=".") & filters.me)
async def compare_and_send_ids(_, msg):
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å –∞–π–¥–∏
    file_path1 = "head/value/user_ids.txt"
    file_path2 = "haed/value/ids.txt"

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    with open(file_path1, "r") as file1, open(file_path2, "r") as file2:
        ids1 = set(file1.read().strip().split())
        ids2 = set(file2.read().strip().split())

    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∞–π–¥–∏ –∏–∑ user_ids –≤ ids
    missing_ids = ids2.difference(ids1)

    if missing_ids:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∞–π–¥–∏ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        message = "Missing IDs in user_ids:\n" + "\n".join(missing_ids)
        await msg.edit(message)
    else:
        await msg.edit("No missing IDs found.")

@app.on_message(filters.command("calc", prefixes=".") & filters.me)
async def calc(_, msg):
    command_parts = msg.text.split(".calc ", maxsplit=1)
    if len(command_parts) < 2:
        await msg.edit(
            "<emoji id=5220149804708930165>üìà</emoji> –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.\n\n"
            "**–õ–æ–≥–∞—Ä–∏—Ñ–º:**\n"
            "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º —á–∏—Å–ª–∞ 10: `log(10)`\n"
            "–õ–æ–≥–∞—Ä–∏—Ñ–º —á–∏—Å–ª–∞ 100 –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 10: `log(100, 10)`\n\n"
            "**–ö–æ—Ä–µ–Ω—å:**\n"
            "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ —á–∏—Å–ª–∞ 16: `sqrt(16)`\n"
            "–ö—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å –∏–∑ —á–∏—Å–ª–∞ 27: `pow(27, 1/3)`\n\n"
            "**–°—Ç–µ–ø–µ–Ω—å:**\n"
            "–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ 5: `pow(5, 2)`\n"
            "–ö—É–± —á–∏—Å–ª–∞ 3: `pow(3, 3)`\n"
            "–ß–∏—Å–ª–æ 10 –≤–æ–∑–≤–æ–¥–∏—Ç—Å—è –≤ 5 —Å—Ç–µ–ø–µ–Ω—å: `10 ** 5`"

        )
        return

    expression = command_parts[1]

    # –ó–∞–º–µ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ sqrt –Ω–∞ math.sqrt –∏ log –Ω–∞ math.log
    expression = expression.replace("sqrt", "math.sqrt")
    expression = expression.replace("log", "math.log")

    try:
        result = eval(expression)

        result_str = str(result)
        if isinstance(result, (int, float)) and abs(result) > 1e6:
            with open("head/value/calc_result.txt", "w") as file:
                file.write(result_str)
            await msg.edit(
                f"<emoji id=5440660757194744323>‚ÄºÔ∏è</emoji> –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n\n<emoji id=5980787993139481991>üî∫</emoji> –ó–∞–ø—Ä–æ—Å: `{expression}`\n\nüìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–æ–º:"
            )
            await msg.reply_document("head/value/calc_result.txt")
        else:
            await msg.edit(
                f"<emoji id=5980787993139481991>üî∫</emoji> –ó–∞–ø—Ä–æ—Å: `{expression}`\n\n<emoji id=5231200819986047254>üìä</emoji> –†–µ–∑—É–ª—å—Ç–∞—Ç: `{result_str}`"
            )

    except SyntaxError:
        await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—ã—Ä–∞–∂–µ–Ω–∏—è.")
    except ZeroDivisionError:
        await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.")
    except OverflowError:
        await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.")
    except Exception as e:
        await msg.edit(f"<emoji id=5210952531676504517>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:\n{e}")

# Function to get a random quote from Quotable API
def get_random_quote():
    response = requests.get("https://api.quotable.io/random")
    if response.status_code == 200:
        data = response.json()
        content = data["content"]
        author = data["author"]
        return f"{content} - {author}"
    else:
        return "Failed to fetch a random quote."

# Function for text translation
def translate_text(text, target_language):
    translator = Translator(to_lang=target_language)
    translation = translator.translate(text)
    return translation

# Command for random quotes with translation
@app.on_message(filters.command("quote", prefixes=".") & filters.me)
async def random_quote(_, msg):
    command = msg.command
    target_language = None

    if len(command) > 1:
        target_language = command[1].lower()

    quote = get_random_quote()

    if target_language:
        translated_quote = translate_text(quote, target_language)
        await msg.edit(f"**<emoji id=5465143921912846619>üí≠</emoji> Original Quote:**\n\n{quote}\n\n**<emoji id=5465143921912846619>üí≠</emoji> Translated Quote ({target_language}):**\n\n{translated_quote}")
    else:
        await msg.edit(f"{quote}")

# –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏ –ø–æ–≥–æ–¥—ã –∏ —ç–º–æ–¥–∑–∏
weather_emojis = {
    "Clear": "<emoji id=5458842406025699616>‚òÄÔ∏è</emoji>",
    "Clouds": "<emoji id=5456176829062717080>‚òÅÔ∏è</emoji>",
    "Drizzle": "<emoji id=5458859474225734343>üå¶</emoji>",
    "Rain": "<emoji id=5283243028905994049>üåß</emoji>",
    "Thunderstorm": "<emoji id=5458498331900650796>‚õà</emoji>",
    "Snow": "<emoji id=5458590407409541785>üå®</emoji>",
    "Mist": "<emoji id=5456289438810251585>üåß</emoji>",
    "Haze": "<emoji id=5456289438810251585>üåß</emoji>",
    "Fog": "<emoji id=5458849741829842481>‚òÅÔ∏è</emoji>",
    "Smoke": "<emoji id=5458849741829842481>‚òÅÔ∏è</emoji>",
    "Sand": "<emoji id=5458710988616375939>‚è≥</emoji>",
    "Squall": "<emoji id=5458747839435776472>üå¨</emoji>",
    "Tornado": "<emoji id=5458813457946125655>üå™</emoji>",
    "Ash": "üåã"
}

def get_weather(city):
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenWeatherMap API
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OpenWeather_KEY}&units=metric"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        response = requests.get(url)
        data = response.json()

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        weather = data["weather"][0]["main"]
        weather_emoji = weather_emojis.get(weather, "")
        temperature = data["main"]["temp"]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_utc = data["dt"]

        # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≥–æ—Ä–æ–¥–∞
        geolocator = Nominatim(user_agent="weather_app")
        location = geolocator.geocode(city)
        latitude = location.latitude
        longitude = location.longitude

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è UTC –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lng=longitude, lat=latitude)
        timezone = pytz.timezone(timezone_str)
        time_local = datetime.fromtimestamp(time_utc, tz=timezone)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
        timezone_offset = time_local.strftime(
            '%z')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "+HHMM" –∏–ª–∏ "-HHMM"
        timezone_sign = "+" if timezone_offset[0] == "+" else "-"  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ —Å–º–µ—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
        timezone_offset = timezone_offset[1:3].lstrip('0')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è –±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ –∑–Ω–∞–∫–∞ –∏ –Ω—É–ª—è
        timezone_formatted = f"GMT {timezone_sign}{timezone_offset}"

        time_formatted = arrow.utcnow().to(timezone).format("DD.MM.YYYY HH:mm")

        if temperature >= int("0"):
            thermometer = "<emoji id=5458786979472744976>üå°</emoji>"
        else:
            thermometer = "<emoji id=5456573443522700218>ü•∂</emoji>"

        text = f"**üìç Location:** {city}\n\n" \
               f"**{weather_emoji} Weather:** {weather}\n" \
               f"**{thermometer} Temperature:** {temperature} ¬∞C\n" \
               f"**<emoji id=5451732530048802485>‚è≥</emoji> Date:** {time_formatted} {timezone_formatted}"

        return text
    except Exception as e:
        return f"<emoji id=5210952531676504517>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã .w –∏–ª–∏ .weather
@app.on_message(filters.command(["w", "weather"], prefixes=".") & filters.me)
async def weather(_, msg):
    command = msg.command
    if len(command) > 1:
        city = " ".join(command[1:])
        weather_info = get_weather(city)
        await msg.edit(weather_info)
    else:
        await msg.edit("<emoji id=5210952531676504517>‚ùå</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.w (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞)` –∏–ª–∏ `.weather (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞)`.")

# –ö–æ–º–∞–Ω–¥–∞ –≤–∑–ª–æ–º–∞ –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞
@app.on_message(filters.command("secret", prefixes=".") & filters.me)
async def hack(_, msg):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(msg.command) > 1:
        secret_text = msg.text.split(maxsplit=1)[1]
    else:
        secret_text = "–õ–æ—Ö"  # –¢–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω

    perc = 0

    while perc < 100:
        try:
            text = f"**<emoji id=5447644880824181073>‚ö†Ô∏è</emoji> –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:** {perc}%..."
            await msg.edit(text)

            perc += random.randint(1, 3)
            await asyncio.sleep(0.07)

        except FloodWait as e:
            await asyncio.sleep(e.x)

    await msg.edit("**<emoji id=5206607081334906820>‚úîÔ∏è</emoji> –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!**")
    await asyncio.sleep(3)

    await msg.edit("**<emoji id=5431609822288033666>ü§´</emoji> –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...**")
    perc = 0

    while perc < 100:
        try:
            text = f"**<emoji id=5431609822288033666>ü§´</emoji>  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:** {perc}%..."
            await msg.edit(text)

            perc += random.randint(1, 5)
            await asyncio.sleep(0.1)

        except FloodWait as e:
            await asyncio.sleep(e.x)

    await msg.edit(f"<emoji id=5397782960512444700>üìå</emoji> == ||**{secret_text}**||")

afk_mode = False
afk_info = {}
answered_users = set()

@app.on_message(filters.private & filters.incoming)
async def afk_handler(_, msg):
    global afk_mode
    global afk_info
    global answered_users

    chat_id = msg.chat.id
    sender_id = msg.from_user.id

    if msg.text is not None:
        command = msg.text.lower()
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞
        return

    if afk_mode and sender_id != 1738263685 and not msg.from_user.is_bot and sender_id not in answered_users:
        timestamp = afk_info["timestamp"]
        reason = afk_info["reason"]
        time_diff = datetime.datetime.now() - timestamp
        hours, remainder = divmod(time_diff.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        duration_str = f"{hours} h, {minutes} min, {seconds} s"

        if reason:
            message = (
                f"**üèôÔ∏è I'm not here right now, so I'll answer later.**\n"
                f"**‚ùáÔ∏è Been online:** {duration_str} ago.\n"
                f"**üìù Reason:** {reason}"
            )
        else:
            message = (
                f"**üèôÔ∏è I'm not here right now, so I'll answer later.**\n"
                f"**‚ùáÔ∏è Been online:** {duration_str} ago.\n"
            )

        await app.send_message(chat_id, message)
        answered_users.add(sender_id)
        return

    if command.startswith(".afk"):
        if afk_mode:
            afk_mode = False
            await msg.edit("‚òÑÔ∏è I'm back!")
            answered_users.clear()
        else:
            afk_mode = True
            afk_info["timestamp"] = datetime.now()
            reason = command[5:].strip() if len(command) > 5 else None
            afk_info["reason"] = reason

            await msg.edit("üçÉ I'm leaving, turning on AFK mode")
    elif command.startswith(".check"):
        if afk_mode:
            timestamp = afk_info["timestamp"]
            reason = afk_info["reason"]
            time_diff = datetime.datetime.now()- timestamp
            hours, remainder = divmod(time_diff.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            duration_str = f"{hours} h, {minutes} min, {seconds} s"

            if reason:
                message = (
                    f"**üèôÔ∏è I'm not here right now, so I'll answer later.**\n"
                    f"**‚ùáÔ∏è Been online:** {duration_str} ago.\n"
                    f"**üìù Reason:** {reason}"
                )
            else:
                message = (
                    f"**üèôÔ∏è I'm not here right now, so I'll answer later.**\n"
                    f"**‚ùáÔ∏è Been online:** {duration_str} ago.\n"
                )

            await app.send_message(chat_id, message)
        else:
            await app.send_message(chat_id, "<emoji id=5447410659077661506>üåê</emoji>  I'm available right now.")

app.run()
